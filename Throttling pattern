Context and Problem

  To control bursts in lod/ no of requests, it is advised to use Throttling to meet the service level agreement.
  If requests are more and hence if applications runs out of memory, CPU application could crash and it will not be able to meet the SLA.

Solution
  An alternative strategy to autoscaling is to allow applications to use resources only up to a limit, and then throttle them when this limit is reached.
  The system should monitor how it's using resources so that, when usage exceeds the threshold, it can throttle requests from one or more users. 
  
Throttling startegrgies:
  Rejecting requests from an individual user who's already accessed system APIs more than n times per second over a given period of time.
  Disabling or degrading the functionality of selected nonessential services so that essential services can run unimpeded with sufficient resources. 
   For example, if the application is streaming video output, it could switch to a lower resolution.
  Deferring operations being performed on behalf of lower priority applications or tenants. 
  
Considertaions

   Throttling should be designed in the early stage of application development from architecural design.  
   Throttling must be performed quickly. The system must be capable of detecting an increase in activity and react accordingly.
     The system must also be able to revert to its original state quickly after the load has eased. 
     This requires that the appropriate performance data is continually captured and monitored.
   If throttling is being used as a temporary measure while a system autoscales, and if resource demands grow very quickly, 
     the system might not be able to continue functioningâ€”even when operating in a throttled mode.
     If this isn't acceptable, consider maintaining larger capacity reserves and configuring more aggressive autoscaling.

When to use this pattern 
To ensure that a system continues to meet service level agreements.
To prevent a single tenant from monopolizing the resources provided by an application.
To handle bursts in activity.
To help cost-optimize a system by limiting the maximum resource levels needed to keep it functioning.
  
